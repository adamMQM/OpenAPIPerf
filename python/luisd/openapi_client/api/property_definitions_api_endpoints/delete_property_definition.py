# coding: utf-8

"""


    Generated by: https://openapi-generator.tech
"""

from dataclasses import dataclass
import re  # noqa: F401
import sys  # noqa: F401
import typing
import urllib3
from urllib3._collections import HTTPHeaderDict

from openapi_client import api_client, exceptions
import decimal  # noqa: F401
from datetime import date, datetime  # noqa: F401
from frozendict import frozendict  # noqa: F401

from openapi_client.schemas import (  # noqa: F401
    AnyTypeSchema,
    ComposedSchema,
    DictSchema,
    ListSchema,
    StrSchema,
    IntSchema,
    Int32Schema,
    Int64Schema,
    Float32Schema,
    Float64Schema,
    NumberSchema,
    DateSchema,
    DateTimeSchema,
    DecimalSchema,
    BoolSchema,
    BinarySchema,
    NoneSchema,
    none_type,
    InstantiationMetadata,
    Unset,
    unset,
    ComposedBase,
    ListBase,
    DictBase,
    NoneBase,
    StrBase,
    IntBase,
    NumberBase,
    DateBase,
    DateTimeBase,
    BoolBase,
    BinaryBase,
    Schema,
    _SchemaValidator,
    _SchemaTypeChecker,
    _SchemaEnumMaker
)

from openapi_client.model.lusid_validation_problem_details import LusidValidationProblemDetails
from openapi_client.model.lusid_problem_details import LusidProblemDetails
from openapi_client.model.deleted_entity_response import DeletedEntityResponse

# path params


class DomainSchema(
    _SchemaEnumMaker(
        enum_value_to_name={
            "NotDefined": "NOTDEFINED",
            "Transaction": "TRANSACTION",
            "Portfolio": "PORTFOLIO",
            "Holding": "HOLDING",
            "ReferenceHolding": "REFERENCEHOLDING",
            "TransactionConfiguration": "TRANSACTIONCONFIGURATION",
            "Instrument": "INSTRUMENT",
            "CutLabelDefinition": "CUTLABELDEFINITION",
            "Analytic": "ANALYTIC",
            "PortfolioGroup": "PORTFOLIOGROUP",
            "Person": "PERSON",
            "AccessMetadata": "ACCESSMETADATA",
            "Order": "ORDER",
            "UnitResult": "UNITRESULT",
            "MarketData": "MARKETDATA",
            "ConfigurationRecipe": "CONFIGURATIONRECIPE",
            "Allocation": "ALLOCATION",
            "Calendar": "CALENDAR",
            "LegalEntity": "LEGALENTITY",
            "Placement": "PLACEMENT",
            "Execution": "EXECUTION",
            "Block": "BLOCK",
            "Participation": "PARTICIPATION",
            "Package": "PACKAGE",
            "OrderInstruction": "ORDERINSTRUCTION",
            "CustomEntity": "CUSTOMENTITY",
        }
    ),
    StrSchema
):
    
    @classmethod
    @property
    def NOTDEFINED(cls):
        return cls._enum_by_value["NotDefined"]("NotDefined")
    
    @classmethod
    @property
    def TRANSACTION(cls):
        return cls._enum_by_value["Transaction"]("Transaction")
    
    @classmethod
    @property
    def PORTFOLIO(cls):
        return cls._enum_by_value["Portfolio"]("Portfolio")
    
    @classmethod
    @property
    def HOLDING(cls):
        return cls._enum_by_value["Holding"]("Holding")
    
    @classmethod
    @property
    def REFERENCEHOLDING(cls):
        return cls._enum_by_value["ReferenceHolding"]("ReferenceHolding")
    
    @classmethod
    @property
    def TRANSACTIONCONFIGURATION(cls):
        return cls._enum_by_value["TransactionConfiguration"]("TransactionConfiguration")
    
    @classmethod
    @property
    def INSTRUMENT(cls):
        return cls._enum_by_value["Instrument"]("Instrument")
    
    @classmethod
    @property
    def CUTLABELDEFINITION(cls):
        return cls._enum_by_value["CutLabelDefinition"]("CutLabelDefinition")
    
    @classmethod
    @property
    def ANALYTIC(cls):
        return cls._enum_by_value["Analytic"]("Analytic")
    
    @classmethod
    @property
    def PORTFOLIOGROUP(cls):
        return cls._enum_by_value["PortfolioGroup"]("PortfolioGroup")
    
    @classmethod
    @property
    def PERSON(cls):
        return cls._enum_by_value["Person"]("Person")
    
    @classmethod
    @property
    def ACCESSMETADATA(cls):
        return cls._enum_by_value["AccessMetadata"]("AccessMetadata")
    
    @classmethod
    @property
    def ORDER(cls):
        return cls._enum_by_value["Order"]("Order")
    
    @classmethod
    @property
    def UNITRESULT(cls):
        return cls._enum_by_value["UnitResult"]("UnitResult")
    
    @classmethod
    @property
    def MARKETDATA(cls):
        return cls._enum_by_value["MarketData"]("MarketData")
    
    @classmethod
    @property
    def CONFIGURATIONRECIPE(cls):
        return cls._enum_by_value["ConfigurationRecipe"]("ConfigurationRecipe")
    
    @classmethod
    @property
    def ALLOCATION(cls):
        return cls._enum_by_value["Allocation"]("Allocation")
    
    @classmethod
    @property
    def CALENDAR(cls):
        return cls._enum_by_value["Calendar"]("Calendar")
    
    @classmethod
    @property
    def LEGALENTITY(cls):
        return cls._enum_by_value["LegalEntity"]("LegalEntity")
    
    @classmethod
    @property
    def PLACEMENT(cls):
        return cls._enum_by_value["Placement"]("Placement")
    
    @classmethod
    @property
    def EXECUTION(cls):
        return cls._enum_by_value["Execution"]("Execution")
    
    @classmethod
    @property
    def BLOCK(cls):
        return cls._enum_by_value["Block"]("Block")
    
    @classmethod
    @property
    def PARTICIPATION(cls):
        return cls._enum_by_value["Participation"]("Participation")
    
    @classmethod
    @property
    def PACKAGE(cls):
        return cls._enum_by_value["Package"]("Package")
    
    @classmethod
    @property
    def ORDERINSTRUCTION(cls):
        return cls._enum_by_value["OrderInstruction"]("OrderInstruction")
    
    @classmethod
    @property
    def CUSTOMENTITY(cls):
        return cls._enum_by_value["CustomEntity"]("CustomEntity")


class ScopeSchema(
    _SchemaValidator(
        max_length=64,
        min_length=1,
        regex=[{
            'pattern': r'^[a-zA-Z0-9\-_]+$',  # noqa: E501
        }],
    ),
    _SchemaTypeChecker(typing.Union[none_type, str, ]),
    StrBase,
    NoneBase,
    Schema
):

    def __new__(
        cls,
        *args: typing.Union[str, None, ],
        _instantiation_metadata: typing.Optional[InstantiationMetadata] = None,
    ) -> 'ScopeSchema':
        return super().__new__(
            cls,
            *args,
            _instantiation_metadata=_instantiation_metadata,
        )


class CodeSchema(
    _SchemaValidator(
        max_length=64,
        min_length=1,
        regex=[{
            'pattern': r'^[a-zA-Z0-9\-_]+$',  # noqa: E501
        }],
    ),
    _SchemaTypeChecker(typing.Union[none_type, str, ]),
    StrBase,
    NoneBase,
    Schema
):

    def __new__(
        cls,
        *args: typing.Union[str, None, ],
        _instantiation_metadata: typing.Optional[InstantiationMetadata] = None,
    ) -> 'CodeSchema':
        return super().__new__(
            cls,
            *args,
            _instantiation_metadata=_instantiation_metadata,
        )
RequestRequiredPathParams = typing.TypedDict(
    'RequestRequiredPathParams',
    {
        'domain': DomainSchema,
        'scope': ScopeSchema,
        'code': CodeSchema,
    }
)
RequestOptionalPathParams = typing.TypedDict(
    'RequestOptionalPathParams',
    {
    },
    total=False
)


class RequestPathParams(RequestRequiredPathParams, RequestOptionalPathParams):
    pass


request_path_domain = api_client.PathParameter(
    name="domain",
    style=api_client.ParameterStyle.SIMPLE,
    schema=DomainSchema,
    required=True,
)
request_path_scope = api_client.PathParameter(
    name="scope",
    style=api_client.ParameterStyle.SIMPLE,
    schema=ScopeSchema,
    required=True,
)
request_path_code = api_client.PathParameter(
    name="code",
    style=api_client.ParameterStyle.SIMPLE,
    schema=CodeSchema,
    required=True,
)
_path = '/api/propertydefinitions/{domain}/{scope}/{code}'
_method = 'DELETE'
_auth = [
    'oauth2',
]
SchemaFor200ResponseBodyTextPlain = DeletedEntityResponse
SchemaFor200ResponseBodyApplicationJson = DeletedEntityResponse
SchemaFor200ResponseBodyTextJson = DeletedEntityResponse


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor200ResponseBodyTextPlain,
        SchemaFor200ResponseBodyApplicationJson,
        SchemaFor200ResponseBodyTextJson,
    ]
    headers: Unset = unset


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    content={
        'text/plain': api_client.MediaType(
            schema=SchemaFor200ResponseBodyTextPlain),
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
        'text/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyTextJson),
    },
)
SchemaFor400ResponseBodyTextPlain = LusidValidationProblemDetails
SchemaFor400ResponseBodyApplicationJson = LusidValidationProblemDetails
SchemaFor400ResponseBodyTextJson = LusidValidationProblemDetails


@dataclass
class ApiResponseFor400(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor400ResponseBodyTextPlain,
        SchemaFor400ResponseBodyApplicationJson,
        SchemaFor400ResponseBodyTextJson,
    ]
    headers: Unset = unset


_response_for_400 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor400,
    content={
        'text/plain': api_client.MediaType(
            schema=SchemaFor400ResponseBodyTextPlain),
        'application/json': api_client.MediaType(
            schema=SchemaFor400ResponseBodyApplicationJson),
        'text/json': api_client.MediaType(
            schema=SchemaFor400ResponseBodyTextJson),
    },
)
SchemaFor0ResponseBodyApplicationJson = LusidProblemDetails


@dataclass
class ApiResponseForDefault(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor0ResponseBodyApplicationJson,
    ]
    headers: Unset = unset


_response_for_default = api_client.OpenApiResponse(
    response_cls=ApiResponseForDefault,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor0ResponseBodyApplicationJson),
    },
)
_status_code_to_response = {
    '200': _response_for_200,
    '400': _response_for_400,
    'default': _response_for_default,
}
_all_accept_content_types = (
    'text/plain',
    'application/json',
    'text/json',
)


class DeletePropertyDefinition(api_client.Api):

    def delete_property_definition(
        self: api_client.Api,
        path_params: RequestPathParams = frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        ApiResponseForDefault,
        api_client.ApiResponseWithoutDeserialization
    ]:
        """
        DeletePropertyDefinition: Delete property definition
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs(RequestPathParams, path_params)

        _path_params = {}
        for parameter in (
            request_path_domain,
            request_path_scope,
            request_path_code,
        ):
            parameter_data = path_params.get(parameter.name, unset)
            if parameter_data is unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)

        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)

        response = self.api_client.call_api(
            resource_path=_path,
            method=_method,
            path_params=_path_params,
            headers=_headers,
            auth_settings=_auth,
            stream=stream,
            timeout=timeout,
        )

        if skip_deserialization:
            api_response = api_client.ApiResponseWithoutDeserialization(response=response)
        else:
            response_for_status = _status_code_to_response.get(str(response.status))
            if response_for_status:
                api_response = response_for_status.deserialize(response, self.api_client.configuration)
            else:
                default_response = _status_code_to_response.get('default')
                if default_response:
                    api_response = default_response.deserialize(response, self.api_client.configuration)
                else:
                    api_response = api_client.ApiResponseWithoutDeserialization(response=response)

        if not 200 <= response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)

        return api_response
